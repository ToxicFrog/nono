
There's a nonograms.org downloader at
https://github.com/ThomasR/nonogram-solver/tree/develop/puzzles/nonograms.org

Game state:
- current contents of playfield
- x,y position of cursor

## Functional requirements

Hilight the currently selected box. Needs to be compatible with existing grid features, so probably a colour hilight, e.g. make cyan instead of white.
Corresponding v and h hints should hilight as well.
v hints need subtle shading to differentiate columns.
Individual cells need at least three states: solid, empty, and unknown -- all initialized to unknown. All of these need to be hilightable! Perhaps Â· for unknown?
Nice to have: dim out hints once satisfied.
Nice to have: once all hints for a row/col are satisfied, mark other cells in that line empty.

## Lanterna

Terminal: lowest-level interface, basically a vt220
Screen: layer on top of terminal, basically a framebuffer
  set cell
  clear
  refresh
  readInput/pollInput
  doResizeIfNecessary should be called at the start of each drawing pass to handle SIGWINCH events
TextGraphics: layer on top of screen, convenience functions for drawing strings, shapes, setting default colours, etc.
MultiWindowTextGUI: the only concrete GUI implementation, runs on top of Screen (automatically grabs the TextGraphics and stuff).
Window: the basic element of the MWTGUI. Window layout is handled by the WM in the MWTGUI; the window can have hints attached to it to modify this behaviour. By default there's no bindings for focus switching, and all windows are modal; you create one and then call window.waitUntilClosed() to block until it goes away.
A window can only contain one widget. Typically this is a Panel, which has a layout manager and lets you put multiple other components into it.
