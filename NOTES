TODO (in approximate priority order)
- check modes:
  - immediate check: make a mistake and it glows red and the mistakes count incs
  - on-demand check: press a button and it shows you all mistakes you've made
  - lives: every time you make a mistake a lives counter decreases, game over at 0
- do something fancy when the puzzle is solved
  - hints glow green (DONE)
  - status window displays victory (DONE)
  - display victory screen,return to main menu (once implemented)
- undo command (what depth?)
- built in list of nonograms.org puzzles to select from
- remember which nonograms were completed
- settings for different check modes, difficulty level

There's a nonograms.org downloader at
https://github.com/ThomasR/nonogram-solver/tree/develop/puzzles/nonograms.org

## Intended game flow

Starting the game takes you to the puzzle select screen. This is probably a
local cache updated from nonograms.org at startup
  www.nonograms.org/size/{small,medium,large}/p/{id}
  ordered newest first, so read until you see an ID you already have and bam,
  cache is updated
Select a puzzle and you start playing it. If you were previously playing it, it
picks up from where you left off, including undo information.
Puzzles you have completed are marked as such (with score?)
Completing a puzzle immediately brings up a "puzzle complete" screen replacing
the normal game screen, showing your score/total time and the puzzle image.
From that you can exit back to the puzzle select screen.
There's something you can do that lets you open a menu with options like reset
puzzle/load different puzzle/quit game/change settings.


; startup: display main menu with small/medium/large/settings/help/exit
; help brings up existing help screen, exit does what it says on the tin
; selecting a size reads the corresponding index and brings up a puzzle picker
; and then calls waitForWindowToClose()
; puzzle picker waits for user to pick a puzzle, brings up game screen, and
; again waitForWindowToClose()
; perhaps needs to make itself invisible first?
; game screen plays until the user exits the game (== close the window), or until
; the game is definitively won (or lost, in a mode that supports that)
; at that point I think it needs to:
; - hide self
; - show defeat/victory screen
; - wait for close
; - close self


## Graphics

All cells are doubled, i.e. one nonogram cell is 2em wide.

Filled: "██"
Maybe: "╺╸" or "╶╴" or "░░"
Empty: "  " or "[]" or "⌜⌟" or (with underline) "▏▕" or "··"

vvvvvvvvvvvv
▏⌟^^
vvvvvvvvvvvv
[]⟔⟓⎡⎦⌜⌟

## Functional requirements

Proposed hotkeys:
 space: fill
 x: clear
 z: unknown
 -\=: clear unknowns in row/col/both
 _|+: fill unknowns in row/col/both
 c: check solution (c twice to display which tiles are wrong?)
 h: display hint (pick a ??? tile at random and show its true state)
 q: quit
 l: load a new puzzle
 s: save the puzzle in progress

Nice to have: puzzle selection screen in game
Nice to have: save puzzle state/remember which ones you've solved

Nice to have: dim out hintlines once satisfied.

Nice to have: dim out individual hints once satisfied.

Nice to have: once all hints for a row/col are satisfied, mark other cells in that line empty.

## Lanterna

Terminal: lowest-level interface, basically a vt220
Screen: layer on top of terminal, basically a framebuffer
  set cell
  clear
  refresh
  readInput/pollInput
  doResizeIfNecessary should be called at the start of each drawing pass to handle SIGWINCH events
TextGraphics: layer on top of screen, convenience functions for drawing strings, shapes, setting default colours, etc.
MultiWindowTextGUI: the only concrete GUI implementation, runs on top of Screen (automatically grabs the TextGraphics and stuff).
Window: the basic element of the MWTGUI. Window layout is handled by the WM in the MWTGUI; the window can have hints attached to it to modify this behaviour. By default there's no bindings for focus switching, and all windows are modal; you create one and then call window.waitUntilClosed() to block until it goes away.
A window can only contain one widget. Typically this is a Panel, which has a layout manager and lets you put multiple other components into it.
